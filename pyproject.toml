[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "affetto-nn-ctrl"
version = "0.1.0"
description = "Affetto controller driven by neural networks"
authors = [
    { name = "Hiroshi Atsuta", email = "atsuta@ieee.org" },
]
maintainers = [
    { name = "Hiroshi Atsuta", email = "atsuta@ieee.org" },
]
dependencies = [
    "affctrllib @ git+https://github.com/affetto-software/affctrllib@develop",
    "pyplotutil @ git+https://github.com/hrshtst/pyplotutil.git",
    "tomli>=2.0.1; python_version < '3.11'",
    "scipy>=1.14.1",
    "scikit-learn>=1.5.2",
    "joblib>=1.4.2",
    "pypdf>=5.1.0",
    "scienceplots>=2.1.1",
    "toml>=0.10.2",
]
readme = "README.md"
requires-python = ">= 3.10"
license = { text = "MIT" }

[dependency-groups]
dev = [
    "pytest>=8.3.2",
    "pytest-cov>=5.0.0",
    "pytest-randomly>=3.15.0",
    "pytest-xdist>=3.6.1",
    "mypy>=1.11.1",
    "nox>=2024.4.15",
    "ruff>=0.5.6",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/affetto_nn_ctrl"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.10
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
# select = ["E4", "E7", "E9", "F"]
select = ["ALL"]
ignore = [
  "D1",                         # Ignore missing docstring
  "PLR0913",                    # Ignore too many function arguments
  "S101",                       # Ignore detection of using assert
  "SIM108",                     # Ignore suggestion of using ternary operator instead of `if`-`else`-block
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = [
  "SIM105",                     # Avoid inadvertently fix try-except-pass clause
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.pydocstyle]
# Use Numpy-style docstrings.
convention = "numpy"

[tool.ruff.lint.isort]
# Always add import annotations
required-imports = ["from __future__ import annotations"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-ra"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "serious",
]

[tool.pyright]
include = [
  "src",
  "tests",
  "apps",
]
exclude = [
    "**/node_modules",
    "**/__pycache__",
]
venvPath = "."
venv = ".venv"

[tool.mypy]
files = ["src", "tests", "apps"]
python_executable = ".venv/bin/python"
check_untyped_defs = true       # Type-checks the interior of functions without type annotations.

[[tool.mypy.overrides]]
module = [
  "joblib.*",
  "numpy.*",
  "pandas.*",
  "scienceplots.*",
  "scipy.*",
  "sklearn.*",
  "tomli.*",
]
ignore_missing_imports = true

# Local Variables:
# jinx-local-words: "McCabe Pyflakes addopts backend bzr cov ctrl defs dev direnv doctests hatchling hg ini ipynb isort joblib md mixedCase mypy nn nox numpy pycache pycodestyle pydocstyle pyenv pypackages pypdf pyplotutil pyright pytest pytype ra reStructuredText rgx scikit scipy sklearn src svn testpaths tomli tox unfixable untyped urls vcs venv venvPath vscode xdist zA"
# End:
